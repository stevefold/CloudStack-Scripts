#!/bin/bash
#
# Init file for Password Download Client
## Ninefold Edited
#
# chkconfig: 345 98 02
# description: Password Download Client
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


# Modify this line to specify the user (default is root)
user=root

# Add your DHCP lease folders here
DHCP_FOLDERS_PATH="/var/lib/dhclient/* /var/lib/dhcp3/* /var/lib/dhcp/*"
DHCP_FOLDERS=$(find $DHCP_FOLDERS_PATH 2>&1 | grep -v find)
password_received=0
file_count=0
error_count=0
regenerated_dhclient=0
cmd="dhclient -q"


if [ -z "$DHCP_FOLDERS" ]; then
	logger -t "cloud" "No lease files found at all, running dhclient in quiet mode"
	$cmd
	regenerated_dhclient=1
	logger -t "cloud" "dhclient -q executed... waiting 5 seconds before continuing"
	sleep 5
	DHCP_FOLDERS=$(find $DHCP_FOLDERS_PATH 2>&1 | grep -v find)

fi
for DHCP_FILE in $DHCP_FOLDERS
do

	if [ -f $DHCP_FILE ]
	then
		file_count=$((file_count+1))
		PASSWORD_SERVER_IP_ARRAY=( $(grep dhcp-server-identifier $DHCP_FILE | tail | uniq | awk '{print $NF}' | tr -d '\;') )

		if [ -z "$PASSWORD_SERVER_IP_ARRAY" ] && [ "$regenerated_dhclient" -ne 1 ]; then
			logger -t "cloud" "Could not find a DHCP host in leases file(s), forcing dhclient to dump last DHCP host(s)"
			$cmd
			sleep 5
			regenerated_dhclient=1
			logger -t "cloud" "dhclient command has been run, searching again"
			PASSWORD_SERVER_IP_ARRAY=( $(grep dhcp-server-identifier $DHCP_FILE | tail | uniq  | awk '{print $NF}' | tr -d '\;') )
		fi

		if [ -n "$PASSWORD_SERVER_IP_ARRAY" ] && [ ${#PASSWORD_SERVER_IP_ARRAY[@]} -gt 0 ];	then
			if [ $password_received -eq 1 ]; then
				logger -t "cloud" "Password has been received from $PASSWORD_SERVER_IP, setting password..."
				break
			fi
			logger -t "cloud" "found ${#PASSWORD_SERVER_IP_ARRAY[@]} unique DHCP hosts in $DHCP_FILE, querying for passwords"
			for i in "${PASSWORD_SERVER_IP_ARRAY[@]}"
			do
				logger -t "cloud" "Found password server IP $i in $DHCP_FILE"
				logger -t "cloud" "Sending request to password server at $i"
				password=$(wget -q -t 3 -T 20 -O - --header "DomU_Request: send_my_password" $i:8080)
				password=$(echo $password | tr -d '\r')
				if [ $? -eq 0 ]
				then
					logger -t "cloud" "Got response from server at $i"

					case $password in
					
					"")					logger -t "cloud" "Password server at $i did not have any password for the VM"
										continue
										;;
					
					"bad_request")		logger -t "cloud" "VM sent an invalid request to password server at $i"
										error_count=$((error_count+1))
										continue
										;;
										
					"saved_password") 	logger -t "cloud" "VM has already saved a password from the password server at $i"
										continue
										;;
										
					*)					logger -t "cloud" "VM got a valid password from server at $i"
										password_received=1
										set_password=$password
										PASSWORD_SERVER_IP=$i
										break
										;;
										
					esac
				else
					logger -t "cloud" "Failed to send request to password server at $i"
					error_count=$((error_count+1))
				fi
			done
		else
			logger -t "cloud" "Could not find password server IP in $DHCP_FILE"
			error_count=$((error_count+1))
		fi
	fi
done

if [ "$password_received" == "0" ]
then
	if [ "$error_count" == "$file_count" ]
	then
		logger -t "cloud" "Failed to get password from any server"
		echo "Failed to get password from any server"
		exit 1
	else
		logger -t "cloud" "Did not need to change password."
		echo "Did not need to change password."
		exit 0
	fi
fi

logger -t "cloud" "Changing password ..."
echo $user:$set_password | chpasswd
						
if [ $? -gt 0 ]
then
	usermod -p `mkpasswd -m SHA-512 $set_password` $user
		
	if [ $? -gt 0 ]
	then
		logger -t "cloud" "Failed to change password for user $user"
		exit 1
	else
		logger -t "cloud" "Successfully changed password for user $user"
	fi
fi
						
logger -t "cloud" "Sending acknowledgment to password server at $PASSWORD_SERVER_IP"
wget -t 3 -T 20 -O - --header "DomU_Request: saved_password" $PASSWORD_SERVER_IP:8080
echo "Successfully changed password for user $user"

exit 0
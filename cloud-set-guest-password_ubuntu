#!/bin/bash
#
# Init file for Password Download Client
## Ninefold Edited
### BEGIN INIT INFO
# Provides:             cloud-set-guest-password
# Required-Start:       $local_fs $syslog $network
# Required-Stop:        $local_fs $syslog $network
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    Init file for Password Download Client
### END INIT INFO

#We don't want to fail on wget errorcodes.
#set -e

. /lib/lsb/init-functions

# Modify this line to specify the user (default is root)
user=user

# Add your DHCP lease folders here
DHCP_FOLDERS="/var/lib/dhcp/*"

function cloud_set_guest_password() {
    password_received=0
    file_count=0
    error_count=0
	regenerated_dhclient=0

    for DHCP_FILE in $DHCP_FOLDERS; do
        if [ -f $DHCP_FILE ]; then
            file_count=$((file_count+1))
			PASSWORD_SERVER_IP_ARRAY=( $(grep dhcp-server-identifier $DHCP_FILE | tail | uniq  | awk '{print $NF}' | tr -d '\;') )

			if [ -z $PASSWORD_SERVER_IP_ARRAY ] && [ $regenerated_dhclient -ne 1 ]; then
				logger -t "cloud" "Could not find a DHCP host in leases file(s), forcing dhclient to dump last DHCP host(s)"
				cmd="dhclient -q"
				$cmd
				sleep 2
				regenerated_dhclient=1
				logger -t "cloud" "dhclient command has been run, searching again"
				PASSWORD_SERVER_IP_ARRAY=( $(grep dhcp-server-identifier $DHCP_FILE | tail | uniq  | awk '{print $NF}' | tr -d '\;') )
			fi

			if [ -n $PASSWORD_SERVER_IP_ARRAY ] && [ ${#PASSWORD_SERVER_IP_ARRAY[@]} -gt 0 ];	then
				if [ $password_received -eq 1 ]; then
					logger -t "cloud" "Password has been received from $PASSWORD_SERVER_IP, setting password..."
					break
				fi
				log_action_msg "cloud" "found ${#PASSWORD_SERVER_IP_ARRAY[@]} unique DHCP hosts in $DHCP_FILE, querying for passwords"
				logger -t "cloud" "found ${#PASSWORD_SERVER_IP_ARRAY[@]} unique DHCP hosts in $DHCP_FILE, querying for passwords"
				for i in "${PASSWORD_SERVER_IP_ARRAY[@]}"
				do
					logger -t "cloud" "Found password server IP $i in $DHCP_FILE"
					logger -t "cloud" "Sending request to password server at $i"
					password=$(wget -q -t 3 -T 5 -O - --header "DomU_Request: send_my_password" $i:8080)
					#use CURL instead
					#password=$(curl -s --retry 3 --connect-timeout 5 --header "DomU_Request: send_my_password" $i:8080)
					password=$(echo $password | tr -d '\r')
					if [ $? -eq 0 ]
					then

						case $password in
						
						"")					logger -t "cloud" "Password server at $i did not have any password for the VM"
											log_action_msg "cloud" "Password server at $i did not have any password for the VM"
											continue
											;;
						
						"bad_request")		logger -t "cloud" "VM sent an invalid request to password server at $i"
											error_count=$((error_count+1))
											continue
											;;
											
						"saved_password") 	logger -t "cloud" "VM has already saved a password from the password server at $i"
											continue
											;;
											
						*)					logger -t "cloud" "VM got a valid password from server at $i"
											password_received=1
											set_password=$password
											PASSWORD_SERVER_IP=$i
											break
											;;
											
						esac
					else
						logger -t "cloud" "Failed to send request to password server at $i"
						error_count=$((error_count+1))
					fi
				done
			else
				logger -t "cloud" "Could not find password server IP in $DHCP_FILE"
				error_count=$((error_count+1))
			fi
		fi
	done

    if [ "$password_received" == "0" ]; then
        if [ "$error_count" == "$file_count" ]; then
            logger -t "cloud" "Failed to get password from any server"
			echo "Failed to get password from any server"
            exit 1
        else
            logger -t "cloud" "Did not need to change password."
			echo "Did not need to change password."
            exit 0
        fi
    fi

    logger -t "cloud" "Changing password ..."

    if [ -x /usr/sbin/chpasswd ]; then
        echo "${user}:${set_password}" | chpasswd 
    else
        echo $set_password | passwd --stdin $user
        if [ $? -gt 0 ]; then
            logger -t "cloud" "Failed to change password for user $user"
			echo "Failed to change password for user $user"
            exit 1
        else
            logger -t "cloud" "Successfully changed password for user $user"
			echo "Successfully changed password for user $user"
        fi
    fi

    logger -t "cloud" "Sending acknowledgment to password server at $PASSWORD_SERVER_IP"
    wget -t 3 -T 20 -O - --header "DomU_Request: saved_password" $PASSWORD_SERVER_IP:8080
	echo "Successfully changed password for user $user"
}

case "$1" in
  start)
      log_action_msg "Starting cloud" "cloud-set-guest-password"
      #sleep 10
      cloud_set_guest_password
      if [ $? -eq 0 ]; then
          log_end_msg 0
      else
          log_end_msg 1
      fi
      ;;
  stop)
      log_action_msg "Stopping cloud" "cloud-set-guest-password"
      log_end_msg 0
      ;;
  *)
      log_action_msg "Usage: /etc/init.d/cloud-set-guest-password {start}"
      exit 1
      ;;
esac

exit 0
